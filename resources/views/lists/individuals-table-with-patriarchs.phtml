<?php

declare(strict_types=1);

use Cissee\WebtreesExt\MoreI18N;
use Fisharebest\Webtrees\Age;
use Fisharebest\Webtrees\Auth;
use Fisharebest\Webtrees\Date;
use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\Individual;
use Fisharebest\Webtrees\Module\ModuleChartInterface;
use Fisharebest\Webtrees\Module\ModuleInterface;
use Fisharebest\Webtrees\Module\RelationshipsChartModule;
use Fisharebest\Webtrees\Registry;
use Fisharebest\Webtrees\Services\ModuleService;
use Fisharebest\Webtrees\Tree;
use Fisharebest\Webtrees\View;
use Ramsey\Uuid\Uuid;
use function GuzzleHttp\json_encode;

/**
 * @var Collection<Individual> $individuals
 * @var bool                   $sosa
 * @var Tree                   $tree
 */

// lists requires a unique ID in case there are multiple lists per page
$table_id = 'table-indi-' . Uuid::uuid4()->toString();

$today_jd          = Registry::timestampFactory()->now()->julianDay();
$hundred_years_ago = Registry::timestampFactory()->now()->subtractYears(100)->julianDay();

$unique_indis = []; // Don't double-count indis with multiple names.

$show_estimated_dates = (bool) $tree->getPreference('SHOW_EST_LIST_DATES');

$today = new Date(strtoupper(date('d M Y')));

$module = \Vesta\VestaUtils::get(ModuleService::class)
    ->findByComponent(ModuleChartInterface::class, $tree, Auth::user())
    ->first(static function (ModuleInterface $module) {
        return $module instanceof RelationshipsChartModule;
    });
?>

<?php View::push('javascript') ?>
<script>
$("#<?= e($table_id) ?> > .wt-table-individual").dataTable({
    processing: true,
    retrieve: true,
    columns: [
        /* Given names  */ { type: "text" },
        /* Surnames     */ { type: "text" },
        <?php
          //[RC] adjusted
        ?>
        /* Patriarchs   */ { type: "text" },
        /* SOSA number  */ { type: "num", visible: <?= json_encode($sosa) ?> },
        /* Birth date   */ { type: "num" },
        /* Anniversary  */ { type: "num" },
        /* Birthplace   */ { type: "text" },
        /* Children     */ { type: "num" },
        /* Deate date   */ { type: "num" },
        /* Anniversary  */ { type: "num" },
        /* Age          */ { type: "num" },
        /* Death place  */ { type: "text" },
        /* Last change  */ { visible: <?= json_encode($tree->getPreference('SHOW_LAST_CHANGE')) ?> },
        /* Filter sex   */ { sortable: false },
        /* Filter birth */ { sortable: false },
        /* Filter death */ { sortable: false },
        /* Filter tree  */ { sortable: false }
    ],
    sorting: <?= json_encode($sosa ? [[5, 'asc']] : [[1, 'asc']]) ?>
});

$("#<?= e($table_id) ?>")
    /* Hide/show parents */
    .on("click", "#btn-toggle-parents", function() {
        $(".wt-individual-list-parents").slideToggle();
    })
    /* Hide/show statistics */
    .on("click", "#btn-toggle-statistics", function() {
        $("#individual-charts-<?= e($table_id) ?>").slideToggle({
            complete: function () {
                // Trigger resize to redraw the chart
                $('div[id^="google-chart-"]').resize();
            }
        });
    })
    /* Filter buttons in table header */
    .on("click", "input[data-filter-column]", function() {
        let checkbox = $(this);
        let siblings = checkbox.parent().siblings();

        // Deselect other options
        siblings.children().prop("checked", false).removeAttr("checked");
        siblings.removeClass('active');

        // Apply (or clear) this filter
        let checked = checkbox.prop("checked");
        let filter  = checked ? checkbox.data("filter-value") : "";
        let column  = $("#<?= e($table_id) ?> .wt-table-individual").DataTable().column(checkbox.data("filter-column"));
        column.search(filter).draw();
    });
</script>
<?php View::endpush() ?>

<div id="<?= e($table_id) ?>">
    <table class="table table-bordered table-sm wt-table-individual"
        <?= view('lists/datatables-attributes') ?>
    >
        <thead>
            <tr>
                <th colspan="16">
                    <div class="btn-toolbar d-flex justify-content-between mb-2" role="toolbar">
                        <div class="btn-group btn-group-toggle btn-group-sm" data-bs-toggle="buttons">
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show only males.') ?>">
                                <input type="checkbox" data-filter-column="13" data-filter-value="M" autocomplete="off">
                                <?= view('icons/sex', ['sex' => 'M']) ?>
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show only females.') ?>">
                                <input type="checkbox" data-filter-column="13" data-filter-value="F" autocomplete="off">
                                <?= view('icons/sex', ['sex' => 'F']) ?>
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show only individuals for whom the gender is not known.') ?>">
                                <input type="checkbox" data-filter-column="13" data-filter-value="U" autocomplete="off">
                                <?= view('icons/sex', ['sex' => 'U']) ?>
                            </label>
                        </div>

                        <div class="btn-group btn-group-toggle btn-group-sm" data-bs-toggle="buttons">
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals who are alive or couples where both partners are alive.') ?>">
                                <input type="checkbox" data-filter-column="15" data-filter-value="N" autocomplete="off">
                                <?= MoreI18N::xlate('Alive') ?>
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals who are dead or couples where both partners are dead.') ?>">
                                <input type="checkbox" data-filter-column="15" data-filter-value="Y" autocomplete="off">
                                <?= MoreI18N::xlate('Dead') ?>
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals who died more than 100 years ago.') ?>">
                                <input type="checkbox" data-filter-column="15" data-filter-value="YES" autocomplete="off">
                                <?= MoreI18N::xlate('Death') ?>&gt;100
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals who died within the last 100 years.') ?>">
                                <input type="checkbox" data-filter-column="15" data-filter-value="Y100" autocomplete="off">
                                <?= MoreI18N::xlate('Death') ?>&lt;=100
                            </label>
                        </div>

                        <div class="btn-group btn-group-toggle btn-group-sm" data-bs-toggle="buttons">
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals born more than 100 years ago.') ?>">
                                <input type="checkbox" data-filter-column="14" data-filter-value="YES" autocomplete="off">
                                <?= MoreI18N::xlate('Birth') ?>&gt;100
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show individuals born within the last 100 years.') ?>">
                                <input type="checkbox" data-filter-column="14" data-filter-value="Y100" autocomplete="off">
                                <?= MoreI18N::xlate('Birth') ?>&lt;=100
                            </label>
                        </div>

                        <div class="btn-group btn-group-toggle btn-group-sm" data-bs-toggle="buttons">
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show “roots” couples or individuals. These individuals may also be called “patriarchs”. They are individuals who have no parents recorded in the database.') ?>">
                                <input type="checkbox" data-filter-column="16" data-filter-value="R" autocomplete="off">
                                <?= MoreI18N::xlate('Roots') ?>
                            </label>
                            <label class="btn btn-outline-secondary" title="<?= MoreI18N::xlate('Show “leaves” couples or individuals. These are individuals who are alive but have no children recorded in the database.') ?>">
                                <input type="checkbox" data-filter-column="16" data-filter-value="L" autocomplete="off">
                                <?= MoreI18N::xlate('Leaves') ?>
                            </label>
                        </div>
                    </div>
                </th>
            </tr>
            <tr>
                <th><?= MoreI18N::xlate('Given names') ?></th>
                <th><?= MoreI18N::xlate('Surname') ?></th>

                <?php
                  //[RC] added
                ?>
                <th><?= /* I18N: end-of line ancestor, 'Spitzenahn' */ I18N::translate('Patriarch') ?></th>

                <th><?= /* I18N: Abbreviation for “Sosa-Stradonitz number”. This is an individual’s surname, so may need transliterating into non-latin alphabets. */
                    MoreI18N::xlate('Sosa') ?></th>
                <th><?= MoreI18N::xlate('Birth') ?></th>
                <th>
                    <span title="<?= MoreI18N::xlate('Anniversary') ?>">
                        <?= view('icons/anniversary') ?>
                    </span>
                </th>
                <th><?= MoreI18N::xlate('Place') ?></th>
                <th>
                    <i class="icon-children" title="<?= MoreI18N::xlate('Children') ?>"></i>
                </th>
                <th><?= MoreI18N::xlate('Death') ?></th>
                <th>
                    <span title="<?= MoreI18N::xlate('Anniversary') ?>">
                        <?= view('icons/anniversary') ?>
                    </span>
                </th>
                <th><?= MoreI18N::xlate('Age') ?></th>
                <th><?= MoreI18N::xlate('Place') ?></th>
                <th><?= MoreI18N::xlate('Last change') ?></th>
                <th hidden></th>
                <th hidden></th>
                <th hidden></th>
                <th hidden></th>
            </tr>
        </thead>

        <tbody>
            <?php foreach ($individuals as $key => $individual) : ?>
            <tr class="<?= $individual->isPendingDeletion() ? 'wt-old' : ($individual->isPendingAddition() ? 'wt-new' : '') ?>">
                <td colspan="2" data-sort="<?= e(str_replace([',', Individual::PRAENOMEN_NESCIO, Individual::NOMEN_NESCIO], 'AAAA', implode(',', array_reverse(explode(',', $individual->sortName()))))) ?>">
                    <?php foreach ($individual->getAllNames() as $num => $name) : ?>
                        <a title="<?= $name['type'] === '_MARNM' ? MoreI18N::xlate('Married name') :  '' ?>" href="<?= e($individual->url()) ?>" class="<?= $num === $individual->getPrimaryName() ? '' : 'text-muted' ?>">
                            <?= $name['full'] ?>
                        </a>
                        <?php if ($num === $individual->getPrimaryName()) : ?>
                            <small><?= view('icons/sex', ['sex' => $individual->sex()]) ?></small>
                        <?php endif ?>
                        <br>
                    <?php endforeach ?>
                    <?= view('lists/individual-table-parents', ['individual' => $individual]) ?>
                </td>

                <td hidden data-sort="<?= e(str_replace([',', Individual::PRAENOMEN_NESCIO, Individual::NOMEN_NESCIO], 'AAAA', $individual->sortName())) ?>"></td>

                <?php
                  //[RC] added
                  $patriarchsPerIndi = [];
                  if (array_key_exists($individual->xref(), $patriarchs)) {
                    foreach ($patriarchs[$individual->xref()] as $p) {
                      if ($individual->xref() !== $p) {
                        /** @var Individual */
                        $patriarch = Registry::individualFactory()->make($p, $individual->tree());
                        $patriarchsPerIndi[] = $patriarch;
                      }
                    }
                  }
                ?>

                <td class="text-center" data-sort="<?= (sizeof($patriarchsPerIndi) === 0)?'':e(str_replace([',', Individual::PRAENOMEN_NESCIO, Individual::NOMEN_NESCIO], 'AAAA', current($patriarchsPerIndi)->sortName())) ?>">
                    <?php
                      foreach ($patriarchsPerIndi as $patriarch) {
                        if (($patriarch !== null) && $patriarch->canShow()) {
                          ?><a href="<?= e($patriarch->url()) ?>"><?= $patriarch->fullName() ?></a><br /><?php
                        }
                      }
                    ?>
                </td>

                <td class="text-center" data-sort="<?= $key ?>">
                    <?php if ($sosa) : ?>
                        <?php if ($module instanceof RelationshipsChartModule) : ?>
                            <a href="<?= e($module->chartUrl($individuals[1], ['xref2' => $individual->xref()])) ?>" rel="nofollow" title="<?= MoreI18N::xlate('Relationships') ?>" rel="nofollow">
                                <?= I18N::number($key) ?>
                            </a>
                        <?php else : ?>
                            <?= I18N::number($key) ?>
                        <?php endif ?>
                    <?php endif ?>
                </td>

                <!-- Birth date -->
                <?php $estimated_birth_date = $individual->getEstimatedBirthDate(); ?>

                <td data-sort="<?= $estimated_birth_date->julianDay() ?>">
                    <?php $birth_dates = $individual->getAllBirthDates(); ?>

                    <?php foreach ($birth_dates as $n => $birth_date) : ?>
                        <?= $birth_date->display($tree, null, true) ?>
                        <br>
                    <?php endforeach ?>

                    <?php if (empty($birth_dates) && $show_estimated_dates) : ?>
                        <?= $estimated_birth_date->display($tree, null, true) ?>
                    <?php endif ?>
                </td>

                <!-- Birth anniversary -->
                <td class="text-center" data-sort="<?= - $estimated_birth_date->julianDay() ?>">
                    <?= (new Age($birth_dates[0] ?? new Date(''), $today))->ageYearsString() ?>
                </td>

                <!-- Birth place -->
                <td data-sort="<?= e($individual->getBirthPlace()->gedcomName()) ?>">
                    <?php foreach ($individual->getAllBirthPlaces() as $n => $birth_place) : ?>
                        <?= $birth_place->shortName(true) ?>
                        <br>
                    <?php endforeach ?>
                </td>

                <!-- Number of children -->
                <td class="text-center" data-sort="<?= $individual->numberOfChildren() ?>">
                    <?= I18N::number($individual->numberOfChildren()) ?>
                </td>

                <!--    Death date -->
                <?php $death_dates = $individual->getAllDeathDates() ?>
                <td data-sort="<?= $individual->getEstimatedDeathDate()->julianDay() ?>">
                    <?php foreach ($death_dates as $num => $death_date) : ?>
                        <?= $death_date->display($tree, null, true) ?>
                    <br>
                    <?php endforeach ?>

                    <?php if (empty($death_dates) && $show_estimated_dates && $individual->getEstimatedDeathDate()->minimumDate()->minimumJulianDay() < $today_jd) : ?>
                        <?= $individual->getEstimatedDeathDate()->display($tree, null, true) ?>
                    <?php endif ?>
                </td>

                <!-- Death anniversary -->
                <td class="text-center" data-sort="<?= - $individual->getEstimatedDeathDate()->julianDay() ?>">
                    <?= (new Age($death_dates[0] ?? new Date(''), $today))->ageYearsString() ?>
                </td>

                <!-- Age at death -->
                <?php $age = new Age($birth_dates[0] ?? new Date(''), $death_dates[0] ?? new Date('')) ?>
                <td class="text-center" data-sort="<?= $age->ageDays() ?>">
                    <?= $age->ageYearsString() ?>
                </td>

                <!-- Death place -->
                <td data-sort="<?= e($individual->getDeathPlace()->gedcomName()) ?>">
                    <?php foreach ($individual->getAllDeathPlaces() as $n => $death_place) : ?>
                        <?= $death_place->shortName(true) ?>
                        <br>
                    <?php endforeach ?>
                </td>

                <!-- Last change -->
                <td data-sort="<?= $individual->lastChangeTimestamp()->timestamp() ?>">
                    <?= view('components/datetime', ['timestamp' => $individual->lastChangeTimestamp()]) ?>
                </td>

                <!-- Filter by sex -->
                <td hidden>
                    <?= $individual->sex() ?>
                </td>

                <!-- Filter by birth date -->
                <td hidden>
                    <?php if ($estimated_birth_date->maximumJulianDay() > $hundred_years_ago && $estimated_birth_date->maximumJulianDay() <= $today_jd) : ?>
                        Y100
                    <?php else : ?>
                        YES
                    <?php endif ?>
                </td>

                <!-- Filter by death date -->
                <td hidden>
                    <?php if ($individual->getEstimatedDeathDate()->maximumJulianDay() > $hundred_years_ago && $individual->getEstimatedDeathDate()->maximumJulianDay() <= $today_jd) : ?>
                        Y100
                    <?php elseif ($individual->isDead()) : ?>
                        YES
                    <?php else : ?>
                        N
                    <?php endif ?>
                </td>

                <!-- Filter by roots/leaves -->
                <td hidden>
                    <?php if ($individual->childFamilies()->isEmpty()) : ?>
                        R
                    <?php elseif (!$individual->isDead() && $individual->numberOfChildren() < 1) : ?>
                        L
                    <?php endif ?>
                </td>
            </tr>

                <?php $unique_indis[$individual->xref()] = true ?>
            <?php endforeach ?>
        </tbody>

        <tfoot>
            <tr>
                <th colspan="16">
                    <div class="btn-group btn-group-sm">
                        <button id="btn-toggle-parents" class="btn btn-outline-secondary" data-bs-toggle="button" data-persist="show-parents">
                            <?= MoreI18N::xlate('Show parents') ?>
                        </button>
                    </div>
                </th>
            </tr>
        </tfoot>
    </table>
</div>
